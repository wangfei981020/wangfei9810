clusterName: "g32-prod-rocketmq"
nameOverride: rocketmq

image:
  repository: "apache/rocketmq"
  pullPolicy: IfNotPresent
  #tag: "5.3.0"
  tag: "4.9.7"

broker:
  size:
    master: 3
    replica: 1
  
  master:
    brokerRole: ASYNC_MASTER
    jvm:
      maxHeapSize: 2048M
      # javaOptsOverride: ""
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 1
        memory: 4Gi
  
  replica:
    jvm:
      maxHeapSize: 1300M
      # javaOptsOverride: ""
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 1
        memory: 4Gi

  hostNetwork: false

  persistence:
    enabled: true
    size: 200Gi
    storageClass: "premium-rwo"
  
  aclConfigMapEnabled: false
  aclConfig: |
    globalWhiteRemoteAddresses:
      - '*'
      - 10.*.*.*
      - 192.168.*.*

  config:
    ## brokerClusterName brokerName brokerRole brokerId 由内置脚本自动生成
    deleteWhen: "04"
    fileReservedTime: "48"
    flushDiskType: "ASYNC_FLUSH"
    waitTimeMillsInSendQueue: "1000"
    # aclEnable: true

  affinityOverride: {}
  tolerations:
    - effect: NoSchedule
      key: middleware-dedicated
      operator: Exists
  nodeSelector:
    tier: middleware

  ## broker.readinessProbe
  readinessProbe:
    tcpSocket:
      port: main
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 6

nameserver:
  replicaCount: 3

  jvm:
    maxHeapSize: 600M
    # javaOptsOverride: ""

  resources:
    limits:
      cpu: 1
      memory: 2Gi
      ephemeral-storage: 8Gi
    requests:
      cpu: 1
      memory: 2Gi
      ephemeral-storage: 1Gi
  
  persistence:
    enabled: false
    size: 20Gi
    storageClass: "premium-rwo"

  affinityOverride: {}
  tolerations:
    - effect: NoSchedule
      key: middleware-dedicated
      operator: Exists
  nodeSelector:
    tier: middleware

  ## nameserver.readinessProbe
  readinessProbe:
    tcpSocket:
      port: main
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 6

  ## nameserver.service
  service:
    annotations: {}
    type: ClusterIP

proxy:
  enabled: false
  replicaCount: 2
  jvm:
    maxHeapSize: 1300M
    # javaOptsOverride: ""

  resources:
    limits:
      cpu: 2
      memory: 6Gi
    requests:
      cpu: 100m
      memory: 2Gi

  affinityOverride: {}
  tolerations:
    - effect: NoSchedule
      key: middleware-dedicated
      operator: Exists
  nodeSelector:
    tier: middleware

  ## proxy.readinessProbe
  readinessProbe:
    tcpSocket:
      port: main
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 6

  ## proxy.service
  service:
    annotations: {}
    type: ClusterIP

dashboard:
  enabled: true
  replicaCount: 1
  image:
    repository: "apacherocketmq/rocketmq-dashboard"
    pullPolicy: IfNotPresent
    tag: "1.0.0"

  auth:
    enabled: true
    users:
      - name: admin
        password: IuP5FqSXboi3V
        isAdmin: true
      - name: dev
        password: 24qqQ9hq5Q

  jvm:
    maxHeapSize: 600M

  resources:
    limits:
      cpu: 500m
      memory: 2Gi
    requests:
      cpu: 125m
      memory: 1Gi

  ## dashboard.readinessProbe
  readinessProbe: {}
  #  failureThreshold: 6
  #  httpGet:
  #    path: /
  #    port: http
  livenessProbe: {}
  
  service:
    annotations: {}
    type: ClusterIP
    # nodePort: 31007
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8,124.160.30.50
    hosts:
      - host: rocketmq-dashboard.example.com
    tls: []
    #  - secretName: example-tls
    #    hosts:
    #      - rocketmq-dashboard.example.com

## controller mode is an experimental feature
controllerModeEnabled: false
controller:
  enabled: false
  replicaCount: 3
  jvm:
    maxHeapSize: 600M
    # javaOptsOverride: ""
  resources:
    limits:
      cpu: 2
      memory: 6Gi
    requests:
      cpu: 100m
      memory: 1Gi
  persistence:
    enabled: true
    size: 20Gi
    accessModes:
      - ReadWriteOnce
  
  ## controller.service
  service:
    annotations: {}
  
  ## controller.config
  config:
    controllerDLegerGroup: group1
    enableElectUncleanMaster: false
    notifyBrokerRoleChanged: true
  
  ## controller.readinessProbe
  readinessProbe:
    tcpSocket:
      port: main
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 6
