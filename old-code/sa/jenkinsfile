pipeline {
  agent {
    node {
      label 'jdk21'
    }

  }
  stages {
    stage('拉取源代码') {
      agent none
      steps {
        sh 'git config --global http.sslVerify false'
        checkout([$class: 'GitSCM', 
                        branches: [[name: "${GIT_BRANCH}"]], 
                        doGenerateSubmoduleConfigurations: true, 
                        extensions: [[
                              $class: 'SubmoduleOption',
                              disableSubmodules: false,
                              parentCredentials: true,
                              recursiveSubmodules: true,
                              reference: '',
                              trackingSubmodules: true
                          ]], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'git-id', url: "${GIT_URL}"]]
                      ])
          sh 'git submodule foreach --recursive git checkout ${MODULE_BRANCH}'
        }
      }

      stage('构建并推送镜像') {
        agent none
        steps {
          script {
            env.COMMIT_ID = sh(returnStdout: true, script: "cd $MODULE && git log -n 1 --pretty=format:'%h'").trim()
            env.TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d%H%M%S').trim()
            env.DOCKER_TAG = "${TIMESTAMP}-${COMMIT_ID}-${BUILD_NUMBER}"
            env.COMMIT_HASH = sh(returnStdout: true, script: "cd $MODULE && git log -n 1 --pretty=format:'%H'").trim()
            env.VERSION_TAG = "${TIMESTAMP}-${GIT_BRANCH}-${COMMIT_HASH}-${BUILD_NUMBER}"
          }

          container('maven') {
            sh '''cat > ./$MODULE/gradle/wrapper/gradle-wrapper.properties <<EOF
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=http\\://gradle-85.nginx/gradle-8.5-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

EOF'''
            sh '''chmod +x ./$MODULE/gradlew
./$MODULE/gradlew clean :$MODULE:build -x test
ls -alh ./$MODULE/build/libs/*'''
            sh 'podman build -f $MODULE/Dockerfile --build-arg VERSION=$VERSION_TAG -t $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG .'
            withCredentials([usernamePassword(credentialsId : 'harbor-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
              sh 'echo "$DOCKER_PASSWORD" | podman login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
              sh 'podman push $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG'
            }

          }

        }
      }

      stage('部署至 dev 环境') {
        agent none
        steps {
          container('maven') {
            sh '''cat > deployment.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
  labels:
    app: $APP_NAME
spec:
  replicas: $POD_REPLICAS
  selector:
    matchLabels:
      app: $APP_NAME
  template:
    metadata:
      labels:
        app: $APP_NAME
    spec:
      imagePullSecrets:
        - name: harbor-id
      containers:
        - name: $APP_NAME
          image: $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG
          lifecycle:
            #set prestop hook
            preStop:
              exec:
                command: [ "curl", "-X POST", "127.0.0.1:8088/actuator/shutdown" ]
          ports:
            - name: tcp-8080
              containerPort: 8080
              protocol: TCP
            - name: tcp-8088
              containerPort: 8088
              protocol: TCP
          env:
             #nacos配置
            - name: REGISTER_HOST
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_HOST
            - name: NAMESPACE
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: NAMESPACE
            - name: REGISTER_USER
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_USER
            - name: REGISTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_PASSWORD
           #资源限制
          resources:
            limits:
              memory: 2Gi
            requests:
              memory: 1Gi
          #探针检测
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8088
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8088
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 5
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: $APP_NAME
    micrometer-prometheus-discovery: 'true'
  name: $APP_NAME-svc
  namespace: $NAMESPACE
spec:
  ports:
    - name: tcp-8080
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: $NODE_PORT
    - name: metrics
      protocol: TCP
      port: 8088
      targetPort: 8088
      nodePort: $METRICS_PORT
    - name: websocket
      protocol: TCP
      port: 7151
      targetPort: 7151
      nodePort: $WEBSOCKET_PORT
  selector:
    app: $APP_NAME
  type: NodePort

EOF'''
            sh 'cat deployment.yaml '
            sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
            sh 'install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl'
            withCredentials([kubeconfigContent(credentialsId : 'kubeconfig-id' ,variable : 'KUBECONFIG' ,)]) {
              sh '''
              set +x
              mkdir ~/.kube
              echo "$KUBECONFIG" > ~/.kube/config
            '''
            }

            sh 'kubectl cluster-info'
            sh 'kubectl apply -f deployment.yaml'
          }

        }
      }

    }
  }