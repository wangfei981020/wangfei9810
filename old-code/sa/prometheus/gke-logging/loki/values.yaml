kubeVersionOverride: null
global:
  image:
    registry: null
  priorityClassName: null
  clusterDomain: "cluster.local"
  dnsService: "kube-dns"
  dnsNamespace: "kube-system"
nameOverride: null
fullnameOverride: null
clusterLabelOverride: null
imagePullSecrets: []

deploymentMode: SimpleScalable

loki:
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 30
    timeoutSeconds: 1
  image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.3.1
    digest: null
    pullPolicy: IfNotPresent
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  serviceAnnotations: {}
  serviceLabels: {}
  revisionHistoryLimit: 10
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  enableServiceLinks: true
  configStorageType: ConfigMap
  configObjectName: '{{ include "loki.name" . }}'
  generatedConfigObjectName: '{{ include "loki.name" . }}'
  config: |
    {{- if .Values.enterprise.enabled}}
    {{- tpl .Values.enterprise.config . }}
    {{- else }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    {{- end }}
    {{- with .Values.loki.server }}
    server:
      {{- toYaml . | nindent 2}}
    {{- end}}
    pattern_ingester:
      enabled: {{ .Values.loki.pattern_ingester.enabled }}
    memberlist:
    {{- if .Values.loki.memberlistConfig }}
      {{- toYaml .Values.loki.memberlistConfig | nindent 2 }}
    {{- else }}
    {{- if .Values.loki.extraMemberlistConfig}}
    {{- toYaml .Values.loki.extraMemberlistConfig | nindent 2}}
    {{- end }}
      join_members:
        - {{ include "loki.memberlist" . }}
        {{- with .Values.migrate.fromDistributed }}
        {{- if .enabled }}
        - {{ .memberlistService }}
        {{- end }}
        {{- end }}
    {{- end }}
    {{- with .Values.loki.ingester }}
    ingester:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- if .Values.loki.commonConfig}}
    common:
    {{- toYaml .Values.loki.commonConfig | nindent 2}}
      storage:
      {{- include "loki.commonStorageConfig" . | nindent 4}}
    {{- end}}
    {{- with .Values.loki.limits_config }}
    limits_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    {{- with .Values.chunksCache }}
    {{- if .enabled }}
    chunk_store_config:
      chunk_cache_config:
        default_validity: {{ .defaultValidity }}
        background:
          writeback_goroutines: {{ .writebackParallelism }}
          writeback_buffer: {{ .writebackBuffer }}
          writeback_size_limit: {{ .writebackSizeLimit }}
        memcached:
          batch_size: {{ .batchSize }}
          parallelism: {{ .parallelism }}
        memcached_client:
          addresses: dnssrvnoa+_memcached-client._tcp.{{ template "loki.fullname" $ }}-chunks-cache.{{ $.Release.Namespace }}.svc
          consistent_hash: true
          timeout: {{ .timeout }}
          max_idle_conns: 72
    {{- end }}
    {{- end }}
    {{- if .Values.loki.schemaConfig }}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- end }}
    {{- if .Values.loki.useTestSchema }}
    schema_config:
    {{- toYaml .Values.loki.testSchemaConfig | nindent 2}}
    {{- end }}
    {{ include "loki.rulerConfig" . }}
    {{- if or .Values.tableManager.retention_deletes_enabled .Values.tableManager.retention_period }}
    table_manager:
      retention_deletes_enabled: {{ .Values.tableManager.retention_deletes_enabled }}
      retention_period: {{ .Values.tableManager.retention_period }}
    {{- end }}
    query_range:
      align_queries_with_step: true
      {{- with .Values.loki.query_range }}
      {{- tpl (. | toYaml) $ | nindent 2 }}
      {{- end }}
      {{- if .Values.resultsCache.enabled }}
      {{- with .Values.resultsCache }}
      cache_results: true
      results_cache:
        cache:
          default_validity: {{ .defaultValidity }}
          background:
            writeback_goroutines: {{ .writebackParallelism }}
            writeback_buffer: {{ .writebackBuffer }}
            writeback_size_limit: {{ .writebackSizeLimit }}
          memcached_client:
            consistent_hash: true
            addresses: dnssrvnoa+_memcached-client._tcp.{{ template "loki.fullname" $ }}-results-cache.{{ $.Release.Namespace }}.svc
            timeout: {{ .timeout }}
            update_interval: 1m
      {{- end }}
      {{- end }}
    {{- with .Values.loki.storage_config }}
    storage_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.query_scheduler }}
    query_scheduler:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.compactor }}
    compactor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.analytics }}
    analytics:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.querier }}
    querier:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.index_gateway }}
    index_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.frontend }}
    frontend:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.frontend_worker }}
    frontend_worker:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.distributor }}
    distributor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    tracing:
      enabled: {{ .Values.loki.tracing.enabled }}
    {{- with .Values.loki.bloom_build }}
    bloom_build:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- with .Values.loki.bloom_gateway }}
    bloom_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
  auth_enabled: false
  memberlistConfig: {}
  extraMemberlistConfig: {}
  tenants: []
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095
    http_server_read_timeout: 600s
    http_server_write_timeout: 600s
  limits_config:
    ingestion_rate_mb: 10
    ingestion_burst_size_mb: 20
    reject_old_samples: true
    reject_old_samples_max_age: 1w
    max_streams_per_user: 10000
    max_global_streams_per_user: 50000
    max_query_length: 30d1h
    max_query_parallelism: 64
    query_timeout: 2m
    split_queries_by_interval: 1h
    retention_period: 30d
  runtimeConfig: {}
  commonConfig:
    path_prefix: /var/loki
    replication_factor: 3
    compactor_address: '{{ include "loki.compactorAddress" . }}'
  storage:
    bucketNames:
      chunks: g32-loki-chunks
    type: gcs
    gcs:
      chunkBufferSize: 4194304
      requestTimeout: "5s"
      enableHttp2: true
    filesystem:
      chunks_directory: /var/loki/chunks
      rules_directory: /var/loki/rules
      admin_api_directory: /var/loki/admin
  memcached:
    chunk_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      batch_size: 256
      parallelism: 10
    results_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      timeout: "500ms"
      default_validity: "12h"
  schemaConfig:
    configs:
      - from: 2024-04-01
        store: tsdb
        object_store: gcs
        schema: v13
        index:
          prefix: index_
          period: 24h
        chunks:
          prefix: chunks_
          period: 24h
  useTestSchema: false
  testSchemaConfig: {}
  rulerConfig:
    storage:
      type: local
      local:
        directory: /var/loki/rules
    wal:
      dir: /var/loki/ruler-wal
  structuredConfig: {}
  query_scheduler: {}
  storage_config:
    tsdb_shipper:
      index_gateway_client:
        server_address: '{{ include "loki.indexGatewayAddress" . }}'
    hedging:
      at: "250ms"
      max_per_second: 20
      up_to: 3
  compactor:
    working_directory: /var/loki/compactor
    retention_enabled: true
    retention_delete_delay: 2h
    delete_request_store: gcs
  pattern_ingester:
    enabled: false
  analytics: {}
  query_range: {}
  querier:
    max_concurrent: 12
  ingester:
    chunk_retain_period: 15m
    chunk_idle_period: 30m
    chunk_encoding: snappy
    chunk_block_size: 262144
    chunk_target_size: 1572864
  index_gateway:
    mode: simple
  frontend:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
    tail_proxy_url: '{{ include "loki.querierAddress" . }}'
  frontend_worker:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
  distributor: {}
  tracing:
    enabled: false
  bloom_build:
    enabled: false
    builder:
      planner_address: '{{ include "loki.bloomPlannerAddress" . }}'
  bloom_gateway:
    enabled: false
    client:
      addresses: '{{ include "loki.bloomGatewayAddresses" . }}'

enterprise:
  enabled: false
  version: 3.1.1
  cluster_name: null
  license:
    contents: "NOTAVALIDLICENSE"
  useExternalLicense: false
  externalLicenseName: null
  externalConfigName: ""
  gelGateway: true
  adminApi:
    enabled: true
  config: |
    {{- if .Values.enterprise.adminApi.enabled }}
    admin_client:
      {{ include "enterprise-logs.adminAPIStorageConfig" . | nindent 2 }}
    {{ end }}
    auth:
      type: {{ .Values.enterprise.adminApi.enabled | ternary "enterprise" "trust" }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    cluster_name: {{ include "loki.clusterName" . }}
    license:
      path: /etc/loki/license/license.jwt
  image:
    registry: docker.io
    repository: grafana/enterprise-logs
    tag: 3.3.1
    digest: null
    pullPolicy: IfNotPresent
  adminToken:
    secret: null
    additionalNamespaces: []
  canarySecret: null
  tokengen:
    enabled: true
    targetModule: "tokengen"
    extraArgs: []
    env: []
    labels: {}
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    extraVolumes: []
    extraVolumeMounts: []
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    extraEnvFrom: []
    priorityClassName: ""
  provisioner:
    enabled: true
    provisionedSecretPrefix: null
    additionalTenants: []
    env: []
    labels: {}
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    priorityClassName: null
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    image:
      registry: docker.io
      repository: grafana/enterprise-logs-provisioner
      tag: null
      digest: null
      pullPolicy: IfNotPresent
    extraVolumeMounts: []

kubectlImage:
  registry: docker.io
  repository: bitnami/kubectl
  tag: null
  digest: null
  pullPolicy: IfNotPresent

test:
  enabled: false
  canaryServiceAddress: "http://loki-canary:3500/metrics"
  prometheusAddress: ""
  timeout: 1m
  labels: {}
  annotations: {}
  image:
    registry: docker.io
    repository: grafana/loki-helm-test
    tag: "ewelch-distributed-helm-chart-17db5ee"
    digest: null
    pullPolicy: IfNotPresent

lokiCanary:
  enabled: false
  push: true
  labelname: pod
  annotations: {}
  podLabels: {}
  service:
    annotations: {}
    labels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: null
  image:
    registry: docker.io
    repository: grafana/loki-canary
    tag: null
    digest: null
    pullPolicy: IfNotPresent
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
        
serviceAccount:
  create: true
  name: null
  imagePullSecrets: []
  annotations: {}
  labels: {}
  automountServiceAccountToken: true

rbac:
  pspEnabled: false
  sccEnabled: false
  pspAnnotations: {}
  namespaced: false

networkPolicy:
  enabled: false
  flavor: kubernetes
  metrics:
    podSelector: {}
    namespaceSelector: {}
    cidrs: []
  ingress:
    podSelector: {}
    namespaceSelector: {}
  alertmanager:
    port: 9093
    podSelector: {}
    namespaceSelector: {}
  externalStorage:
    ports: []
    cidrs: []
  discovery:
    port: null
    podSelector: {}
    namespaceSelector: {}
  egressWorld:
    enabled: false
  egressKubeApiserver:
    enabled: false

memberlist:
  service:
    publishNotReadyAddresses: false
    annotations: {}

adminApi:
  replicas: 1
  hostAliases: []
  extraArgs: {}
  extraEnvFrom: []
  labels: {}
  annotations: {}
  service:
    labels: {}
    annotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsGroup: 10001
    runAsUser: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  strategy:
    type: RollingUpdate
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  resources: {}
  env: []
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  affinity: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  terminationGracePeriodSeconds: 60

gateway:
  enabled: true
  replicas: 3
  containerPort: 8080
  verboseLogging: true
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  deploymentStrategy:
    type: RollingUpdate
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.27-alpine
    digest: null
    pullPolicy: IfNotPresent
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumes: []
  extraVolumeMounts: []
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: gateway
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector:
    tier: middleware
  topologySpreadConstraints: []
  tolerations:
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  service:
    port: 80
    type: ClusterIP
    clusterIP: null
    nodePort: null
    loadBalancerIP: null
    annotations: {}
    labels: {}
  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    labels: {}
    hosts:
      - host: gateway.loki.example.com
        paths:
          - path: /
    tls:
      - secretName: loki-gateway-tls
        hosts:
          - gateway.loki.example.com
  basicAuth:
    enabled: false
    username: null
    password: null
    htpasswd: >-
      {{ if .Values.loki.tenants }}
        {{- range $t := .Values.loki.tenants }}
      {{ htpasswd (required "All tenants must have a 'name' set" $t.name) (required "All tenants must have a 'password' set" $t.password) }}
        {{- end }}
      {{ else }} {{ htpasswd (required "'gateway.basicAuth.username' is required" .Values.gateway.basicAuth.username) (required "'gateway.basicAuth.password' is required" .Values.gateway.basicAuth.password) }} {{ end }}
    existingSecret: null
  readinessProbe:
    httpGet:
      path: /
      port: http-metrics
    initialDelaySeconds: 15
    timeoutSeconds: 1
  nginxConfig:
    schema: http
    enableIPv6: true
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    serverSnippet: ""
    httpSnippet: >-
      {{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}
    clientMaxBodySize: 4M
    ssl: false
    customReadUrl: null
    customWriteUrl: null
    customBackendUrl: null
    resolver: ""
    file: |
      {{- include "loki.nginxFile" . | indent 2 -}}

enterpriseGateway:
  replicas: 1
  hostAliases: []
  extraArgs: {}
  extraEnvFrom: []
  labels: {}
  annotations: {}
  service:
    type: ClusterIP
    labels: {}
    annotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsGroup: 10001
    runAsUser: 10001
    fsGroup: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  useDefaultProxyURLs: true
  strategy:
    type: RollingUpdate
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  resources: {}
  env: []
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  affinity: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  terminationGracePeriodSeconds: 60

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  paths:
    distributor:
      - /api/prom/push
      - /loki/api/v1/push
      - /otlp/v1/logs
    queryFrontend:
      - /api/prom/query
      - /api/prom/label
      - /api/prom/series
      - /api/prom/tail
      - /loki/api/v1/query
      - /loki/api/v1/query_range
      - /loki/api/v1/tail
      - /loki/api/v1/label
      - /loki/api/v1/labels
      - /loki/api/v1/series
      - /loki/api/v1/index/stats
      - /loki/api/v1/index/volume
      - /loki/api/v1/index/volume_range
      - /loki/api/v1/format_query
      - /loki/api/v1/detected_field
      - /loki/api/v1/detected_fields
      - /loki/api/v1/detected_labels
      - /loki/api/v1/patterns
    ruler:
      - /api/prom/rules
      - /api/prom/api/v1/rules
      - /api/prom/api/v1/alerts
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
  hosts:
    - loki.example.com
  tls: []
migrate:
  fromDistributed:
    enabled: false
    memberlistService: ""
singleBinary:
  replicas: 0
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "all"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraContainers: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: single-binary
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  persistence:
    enableStatefulSetAutoDeletePVC: true
    enabled: true
    size: 20Gi
    storageClass: null
    selector: null
    annotations: {}
write:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior:
      scaleUp:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 900
      scaleDown:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 1800
        stabilizationWindowSeconds: 3600
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "write"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  initContainers: []
  extraContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraVolumeClaimTemplates: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity: {}
  dnsConfig: {}
  nodeSelector: 
    tier: middleware
  topologySpreadConstraints: []
  tolerations:
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: false
    size: 20Gi
    storageClass: premium-rwo
    selector: null
    annotations: {}
read:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "read"
  legacyReadTarget: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 30
  affinity: {}
  dnsConfig: {}
  nodeSelector: 
    tier: middleware
  topologySpreadConstraints: []
  tolerations: 
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  podManagementPolicy: "Parallel"
  persistence:
    enableStatefulSetAutoDeletePVC: true
    size: 20Gi
    storageClass: null
    selector: null
    annotations: {}
backend:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "backend"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity: {}
  dnsConfig: {}
  nodeSelector: 
    tier: middleware
  topologySpreadConstraints: []
  tolerations:
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: true
    size: 20Gi
    storageClass: premium-rwo
    selector: null
    annotations: {}
ingester:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  lifecycle: {}
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: ingester
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ingester
          topologyKey: kubernetes.io/hostname
  maxUnavailable: 1
  nodeSelector: {}
  tolerations: []
  readinessProbe: {}
  livenessProbe: {}
  updateStrategy:
    type: RollingUpdate
  persistence:
    enabled: false
    inMemory: false
    claims:
      - name: data
        size: 20Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  appProtocol:
    grpc: ""
  zoneAwareReplication:
    enabled: true
    maxUnavailablePct: 33
    zoneA:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    zoneB:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    zoneC:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    migration:
      enabled: false
      excludeDefaultZone: false
      readPath: false
      writePath: false
distributor:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: distributor
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  maxSurge: 0
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
querier:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: querier
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: querier
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  maxSurge: 0
  nodeSelector: {}
  tolerations: []
  dnsConfig: {}
  persistence:
    enabled: false
    size: 20Gi
    storageClass: null
    annotations: {}
  appProtocol:
    grpc: ""
queryFrontend:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: query-frontend
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
queryScheduler:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: query-scheduler
          topologyKey: kubernetes.io/hostname
  maxUnavailable: 1
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
indexGateway:
  replicas: 0
  joinMemberlist: true
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: index-gateway
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  persistence:
    enabled: false
    inMemory: false
    size: 20Gi
    storageClass: null
    annotations: {}
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  appProtocol:
    grpc: ""
  updateStrategy:
    type: RollingUpdate
compactor:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: compactor
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    size: 20Gi
    storageClass: null
    annotations: {}
    claims:
      - name: data
        size: 20Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomGateway:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-gateway
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    annotations: {}
    claims:
      - name: data
        size: 20Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomPlanner:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-planner
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    annotations: {}
    claims:
      - name: data
        size: 20Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomBuilder:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-builder
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
patternIngester:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: pattern-ingester
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    size: 20Gi
    storageClass: null
    annotations: {}
    claims:
      - name: data
        size: 20Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
ruler:
  enabled: false
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ruler
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  dnsConfig: {}
  persistence:
    enabled: false
    size: 20Gi
    storageClass: null
    annotations: {}
  appProtocol:
    grpc: ""
  directories: {}
memcached:
  image:
    repository: memcached
    tag: 1.6.32-alpine
    pullPolicy: IfNotPresent
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 11211
    runAsGroup: 11211
    fsGroup: 11211
  priorityClassName: null
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
memcachedExporter:
  enabled: true
  image:
    repository: prom/memcached-exporter
    tag: v0.15.0
    pullPolicy: IfNotPresent
  resources:
    requests: {}
    limits: {}
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
  extraArgs: {}
resultsCache:
  enabled: true
  defaultValidity: 12h
  timeout: 500ms
  replicas: 1
  port: 11211
  allocatedMemory: 1024
  maxItemMemory: 5
  connectionLimit: 16384
  writebackSizeLimit: 500MB
  writebackBuffer: 10485760
  writebackParallelism: 5
  initContainers: []
  annotations: {}
  affinity: {}
  nodeSelector: 
    tier: middleware
  topologySpreadConstraints: []
  tolerations:
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  podDisruptionBudget:
    maxUnavailable: 1
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  terminationGracePeriodSeconds: 60
  statefulStrategy:
    type: RollingUpdate
  extraExtendedOptions: ""
  extraArgs: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  resources: null
  service:
    annotations: {}
    labels: {}
  persistence:
    enabled: false
    storageSize: 20G
    storageClass: null
    mountPath: /data
chunksCache:
  enabled: true
  batchSize: 20
  parallelism: 5
  timeout: 2000ms
  defaultValidity: 12h
  replicas: 1
  port: 11211
  allocatedMemory: 8192
  maxItemMemory: 5
  connectionLimit: 16384
  writebackSizeLimit: 500MB
  writebackBuffer: 10485760
  writebackParallelism: 5
  initContainers: []
  annotations: {}
  affinity: {}
  nodeSelector: 
    tier: middleware
  topologySpreadConstraints: []
  tolerations:
    - key: "middleware-dedicated"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  podDisruptionBudget:
    maxUnavailable: 1
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  terminationGracePeriodSeconds: 60
  statefulStrategy:
    type: RollingUpdate
  extraExtendedOptions: ""
  extraArgs: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  resources: null
  service:
    annotations: {}
    labels: {}
  persistence:
    enabled: false
    storageSize: 20G
    storageClass: null
    mountPath: /data
rollout_operator:
  enabled: false
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
minio:
  enabled: false
  replicas: 1
  drivesPerNode: 2
  rootUser: enterprise-logs
  rootPassword: supersecret
  buckets:
    - name: chunks
      policy: none
      purge: false
    - name: ruler
      policy: none
      purge: false
    - name: admin
      policy: none
      purge: false
  persistence:
    size: 5Gi
    annotations: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  address: null
extraObjects: []
sidecar:
  image:
    repository: kiwigrid/k8s-sidecar
    tag: 1.28.0
    sha: ""
    pullPolicy: IfNotPresent
  resources: {}
  securityContext: {}
  skipTlsVerify: false
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  rules:
    enabled: true
    label: loki_rule
    labelValue: ""
    folder: /rules
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    script: null
    watchServerTimeout: 60
    watchClientTimeout: 60
    logLevel: INFO
monitoring:
  dashboards:
    enabled: false
    namespace: null
    annotations: {}
    labels:
      grafana_dashboard: "1"
  rules:
    enabled: false
    alerting: true
    disabled: {}
    namespace: null
    annotations: {}
    labels: {}
    additionalRuleLabels: {}
    additionalGroups: []
  serviceMonitor:
    enabled: false
    namespaceSelector: {}
    annotations: {}
    labels: {}
    interval: 15s
    scrapeTimeout: null
    relabelings: []
    metricRelabelings: []
    scheme: http
    tlsConfig: null
    metricsInstance:
      enabled: true
      annotations: {}
      labels: {}
      remoteWrite: null
  selfMonitoring:
    enabled: false
    tenant:
      name: "self-monitoring"
      password: null
      secretNamespace: "{{ .Release.Namespace }}"
    grafanaAgent:
      installOperator: false
      annotations: {}
      labels: {}
      enableConfigReadAPI: false
      priorityClassName: null
      resources: {}
      tolerations: []
    podLogs:
      apiVersion: monitoring.grafana.com/v1alpha1
      annotations: {}
      labels: {}
      relabelings: []
      additionalPipelineStages: []
    logsInstance:
      annotations: {}
      labels: {}
      clients: null
tableManager:
  enabled: false
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  annotations: {}
  podAnnotations: {}
  service:
    annotations: {}
    labels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: table-manager
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  retention_deletes_enabled: false
  retention_period: 0
